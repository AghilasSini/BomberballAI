/**
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 **/



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8


//ss Apply the java-library plugin to add support for Java Library
//apply plugin: 'java-library'
project.ext.mainClassName = "com.glhf.bomberball.Main"
project.ext.assetsDir = new File("../main/resources/assets/")







 ext {
	appName = "ia_bomberball_glhf"
	gdxVersion = '1.9.8'
	gsonVersion = '2.8.5'
	roboVMVersion = '2.3.5'
	box2DLightsVersion = '1.4'
	ashleyVersion = '1.7.0'
	aiVersion = '1.8.0'
}




// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    
    
  
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
        google()
}

dependencies {
   // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.3'


    /// https://mvnrepository.com/artifact/com.google.guava/guava
	compile group: 'com.google.guava', name: 'guava', version: '23.0'

   // https://mvnrepository.com/artifact/junit/junit
	testCompile group: 'junit', name: 'junit', version: '4.12'

	

    // Use Log

    compile 'ch.qos.logback:logback-classic:1.1.2'

 

    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"






    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

	runtime fileTree(dir: 'lib', include: '*.jar')

}


eclipse {
    project {
        name = appName
        linkedResource name: 'assets', type: '2', location: './src/resource/assets/'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    compile"com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets/' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}



task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}



jar {
   baseName = project.name + '-all'
   
   from('src/resources') {
      include 'assets/**'
   }

	manifest { 
		  attributes 'Implementation-Title': 'Gradle Jar File Example',
		  'Implementation-Version': version,
		  'Main-Class': 'com.glhf.bomberball.Main'
		  }  
		
		
		
	from { 
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		
		  }{
			
		  
	   
  }
}










